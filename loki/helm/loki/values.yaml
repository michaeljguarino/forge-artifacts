global:
  rbac:
    pspEnabled: false

redisPassword: ""

loki-distributed:
  serviceMonitor:
    enabled: true
  prometheusRule:
    enabled: true
    groups:
    - name: loki-rules
      rules:
        - record: job:loki_request_duration_seconds_bucket:sum_rate
          expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job)
        - record: job_route:loki_request_duration_seconds_bucket:sum_rate
          expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job, route)
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
          expr: sum(rate(container_cpu_usage_seconds_total[1m])) by (node, namespace, pod, container)
  serviceAccount:
    name: loki
  ingester:
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
    persistence:
      enabled: true
  distributor:
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
  querier:
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
  queryFrontend:
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
  tableManager:
    enabled: false
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
  gateway:
    enabled: true
    image:
      registry: dkr.plural.sh
      repository: loki/nginxinc/nginx-unprivileged
      tag: 1.19-alpine
    ingress:
      ingressClassName: nginx
      annotations:
        kubernetes.io/tls-acme: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: basic-auth
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - foo'
  compactor:
    enabled: true
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
  ruler:
    enabled: true
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
    directories:
      fake:
        rules1.txt: |
          groups:
            - name: should_fire
              rules:
                - alert: HighPercentageError
                  expr: |
                    sum(rate({app="foo", env="production"} |= "error" [5m])) by (job)
                      /
                    sum(rate({app="foo", env="production"}[5m])) by (job)
                      > 0.05
                  for: 10m
                  labels:
                    severity: warning
                  annotations:
                    summary: High error rate
            - name: credentials_leak
              rules:
                - alert: http-credentials-leaked
                  annotations:
                    message: "{{ $labels.job }} is leaking http basic auth credentials."
                  expr: 'sum by (cluster, job, pod) (count_over_time({namespace="prod"} |~ "http(s?)://(\\w+):(\\w+)@" [5m]) > 0)'
                  for: 10m
                  labels:
                    severity: critical
        rules2.txt: |
          groups:
            - name: example
              rules:
              - alert: HighThroughputLogStreams
                expr: sum by(container) (rate({job=~"loki-dev/.*"}[1m])) > 1000
                for: 2m
  indexGateway:
    enabled: true
    extraArgs:
    - -config.expand-env=true
    extraEnvFrom:
    - secretRef:
        name: redis-password
    persistence:
      enabled: true
  loki:
    image:
      registry: dkr.plural.sh
      repository: loki/grafana/loki
      tag: 2.6.1
    config: ""
    structuredConfig:
      auth_enabled: false
      server:
        http_listen_port: 3100
      distributor:
        ring:
          kvstore:
            store: memberlist
      memberlist:
        join_members:
          - '{{ include "loki.fullname" . }}-memberlist'
      ingester:
        chunk_target_size: 1536000
        max_chunk_age: 1h
        lifecycler:
          ring:
            kvstore:
              store: memberlist
            replication_factor: 1
        chunk_idle_period: 30m
        chunk_block_size: 262144
        chunk_encoding: snappy
        chunk_retain_period: 1m
        max_transfer_retries: 0
        wal:
          dir: /var/loki/wal
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
        max_cache_freshness_per_query: 10m
        split_queries_by_interval: 15m
      chunk_store_config:
        max_look_back_period: 0s
        chunk_cache_config:
          redis:
            endpoint: redis-master.redis:6379
            db: 6
            password: ${REDIS_PASSWORD}
        write_dedupe_cache_config:
          redis:
            endpoint: redis-master.redis:6379
            db: 6
            password: ${REDIS_PASSWORD}
      compactor:
        shared_store: filesystem
      table_manager:
        retention_deletes_enabled: false
        retention_period: 0s
      query_range:
        align_queries_with_step: true
        max_retries: 5
        cache_results: true
        results_cache:
          cache:
            redis:
              endpoint: redis-master.redis:6379
              db: 6
              password: ${REDIS_PASSWORD}
            enable_fifocache: true
            fifocache:
              max_size_items: 1024
              validity: 24h
      frontend_worker:
        frontend_address: '{{ include "loki.queryFrontendFullname" . }}:9095'
      frontend:
        log_queries_longer_than: 5s
        compress_responses: true
        tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100
      ruler:
        ring:
          kvstore:
            store: memberlist
        rule_path: /tmp/loki/scratch
        alertmanager_url: https://alertmanager.xx
        external_url: https://alertmanager.xx
      storage_config:
        index_queries_cache_config:
          redis:
            endpoint: redis-master.redis:6379
            db: 6
            password: ${REDIS_PASSWORD}
        aws:
          s3: s3://eu-central-1
          bucketnames: my-loki-s3-bucket
        boltdb_shipper:
          shared_store: filesystem
          active_index_directory: /var/loki/index
          cache_location: /var/loki/cache
          cache_ttl: 168h
          index_gateway_client:
            server_address: dns:///{{ include "loki.indexGatewayFullname" . }}:9095
        filesystem:
          directory: /var/loki/chunks
      schema_config:
        configs:
          - from: 2020-09-07
            store: boltdb-shipper
            object_store: aws
            schema: v11
            index:
              prefix: loki_index_
              period: 24h

promtail:
  image:
    registry: dkr.plural.sh
    repository: loki/grafana/promtail
    tag: 2.6.1
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3101"
    prometheus.io/path: /metrics
    prometheus.io/scheme: http
  tolerations:
  - effect: NoSchedule
    operator: Exists
  - effect: NoExecute
    operator: Exists
  serviceMonitor:
    enabled: true
  config:
    clients:
    - url: http://loki-loki-distributed-gateway/loki/api/v1/push
      tenant_id: 1
    snippets:
      pipelineStages:
        - docker:
        - match:
            selector: '{app="ingress-nginx"}'
            stages:
              - replace:
                  expression: '(?:[0-9]{1,3}\.){3}([0-9]{1,3})'
                  replace: '***'
