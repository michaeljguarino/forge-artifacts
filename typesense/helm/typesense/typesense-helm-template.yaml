---
# Source: typesense/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-typesense-env
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  TYPESENSE_API_KEY: ""
---
# Source: typesense/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodeslist
  namespace: typesense
data:
  nodes: "typesense-0.ts.typesense.svc.cluster.local:8107:8108,typesense-1.ts.typesense.svc.cluster.local:8107:8108,typesense-2.ts.typesense.svc.cluster.local:8107:8108"
---
# Source: typesense/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: typesense-storage
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
---
# Source: typesense/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-typesense-role
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["watch", "list"]
---
# Source: typesense/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-typesense-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-typesense-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
---
# Source: typesense/templates/peeringservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: ts
  namespace: typesense
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: typesense
  ports:
  - name: http
    port: 8108
    targetPort: 8108
    protocol: TCP
---
# Source: typesense/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-typesense
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: 
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
---
# Source: typesense/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-typesense
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  serviceName: ts
  selector:
    matchLabels:
      app.kubernetes.io/name: typesense
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: typesense
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: typesense
          securityContext:
            {}
          image: "docker.io/typesense/typesense:0.25.0.rc18"
          imagePullPolicy: IfNotPresent
          command:
            - /opt/typesense-server
            - '-d'
            - /usr/share/typesense/data
            - '-a'
            - 'key--please-change'
            - '--api-port'
            - '8108'
            - '--peering-port'
            - '8107'
            - '--nodes'
            - /usr/share/typesense/nodes
            - '--reset-peers-on-error'
          env:
            - name: TYPESENSE_DATA_DIR
              value: /data
            - name: TYPESENSE_ENABLE_CORS
              value: "true"
          envFrom:
            - secretRef:
                name: release-name-typesense-env
          ports:
            - name: http
              containerPort: 8108
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {}
          volumeMounts:
          - name: nodeslist
            mountPath: /usr/share/typesense
          - name: data
            mountPath: /usr/share/typesense/data
      volumes:
      - name: nodeslist
        configMap:
          name: nodeslist
          items:
          - key: nodes
            path: nodes
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
---
# Source: typesense/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-typesense
  labels:
    helm.sh/chart: typesense-0.1.0
    app.kubernetes.io/name: typesense
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.24.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: "chart-example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-typesense
                port:
                  number: 80
