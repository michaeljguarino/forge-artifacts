# TODO: figure out which apps use MySQL and configure the MySQL image to the vendored ones. Also set `mysqlVersion` since that's required by the operator when using a custom image.
# TODO: possibly figure out which apps use MySQL and set `MinAvailable: 1` so PDBs are created.

oauth2-proxy:
  enabled: false
  fullnameOverride: mysql-oauth2-proxy
  image:
    repository: dkr.plural.sh/oauth2-proxy/oauth2-proxy/oauth2-proxy
    tag: v7.4.0

  resources:
    limits:
      memory: 50Mi
    requests:
      cpu: 25m
      memory: 50Mi

  htpasswdFile:
    enabled: false
    existingSecret: httpaswd-users

  config:
    clientID: ""
    clientSecret: ""
    cookieSecret: ""
    configFile: ""
  extraEnv:
  - name: OAUTH2_PROXY_EMAIL_DOMAINS
    value: "*"
  - name: OAUTH2_PROXY_SKIP_PROVIDER_BUTTON
    value: "true"
  extraVolumes:
  - name: oidc-secret
    secret:
      secretName: mysql-oauth2-proxy
  extraVolumeMounts:
  - mountPath: /etc/oidc-secret/
    name: oidc-secret

  metrics:
    enabled: true
    servicemonitor:
      enabled: true

  alphaConfig:
    enabled: true
    # Add config annotations
    annotations: {}
    # Arbitrary configuration data to append to the server section
    serverConfigData: {}
    # Arbitrary configuration data to append to the metrics section
    metricsConfigData: {}
    # Arbitrary configuration data to append
    configData:
      providers:
      - id: plural
        name: Plural
        provider: "oidc"
        clientID: "XXXXXXX"
        clientSecretFile: /etc/oidc-secret/client-secret
        scope: "openid profile offline_access"
        oidcConfig:
          issuerURL: https://oidc.plural.sh/
          emailClaim: email
          groupsClaim: groups
          userIDClaim: email
          audienceClaims:
          - aud
    existingConfig: mysql-oauth2-proxy-config
  
  ingress:
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"

mysql-operator:
  replicas: 1
  image:
    repository: dkr.plural.sh/mysql/bitpoke/mysql-operator
    tag: v0.6.3
    imagePullPolicy: Always
  sidecar57:
    image:
      repository: dkr.plural.sh/mysql/bitpoke/mysql-operator-sidecar-5.7
      tag: v0.6.3
  sidecar80:
    image:
      repository: dkr.plural.sh/mysql/bitpoke/mysql-operator-sidecar-8.0
      tag: v0.6.3
  metricsExporter:
    image:
      repository: dkr.plural.sh/mysql/prom/mysqld-exporter
      tag: v0.14.0

  serviceMonitor:
    enabled: true

  mysqlClustersGlobalServiceMonitor:
    enabled: true

  resources:
    requests:
     cpu: 10m
     memory: 72Mi

  orchestrator:
    image:
      repository: dkr.plural.sh/mysql/bitpoke/mysql-operator-orchestrator
      tag: v0.6.3

    resources:
      requests:
        cpu: 50m
        memory: 30Mi
