global:
  image:
    repository: dkr.plural.sh/argo-cd/argoproj/argocd
    tag: v2.5.2
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

argo-cd:
  crds:
    install: false
  externalRedis:
    host: redis-master.redis
    username: ""
    port: 6379
  configs:
    params:
      redis.db: 2
  ## Controller
  controller:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        memory: 384Mi
    ## Server metrics controller configuration
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: true
        spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[ArgoCD] No reported applications"
            description: >
              ArgoCD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
              The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.

  ## Dex
  dex:
    enabled: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    image:
      repository: dkr.plural.sh/argo-cd/dexidp/dex
      tag: v2.30.3
      imagePullPolicy: IfNotPresent
    resources: {}
    #  limits:
    #    cpu: 50m
    #    memory: 64Mi
    #  requests:
    #    cpu: 10m
    #    memory: 32Mi

  ## Redis
  redis:
    enabled: false

  # This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
  # the custom redis deployment is omitted
  redis-ha:
    enabled: false

  ## Server
  server:
    resources:
      requests:
        cpu: 5m
        memory: 32Mi
      limits:
        memory: 64Mi

    ## Certificate configuration
    certificate:
      enabled: true
      domain: argocd.example.com
      issuer:
        kind: ClusterIssuer
        name: letsencrypt-prod

    ## Server metrics service configuration
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      https: true

  ## Repo Server
  repoServer:
    resources:
      requests:
        cpu: 5m
        memory: 32Mi
      limits:
        memory: 64Mi

    ## Repo server metrics service configuration
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  applicationSet:
    resources:
      requests:
        cpu: 5m
        memory: 32Mi
      limits:
        memory: 64Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  notifications:
    resources:
      requests:
        cpu: 5m
        memory: 32Mi
      limits:
        memory: 64Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true


argocd-image-updater:
  enabled: false
  image:
    repository: dkr.plural.sh/argo-cd/argoprojlabs/argocd-image-updater
    pullPolicy: IfNotPresent
    tag: v0.10.3
  config:
    applicationsAPIKind: "kubernetes"
    argocd:
      grpcWeb: true
      serverAddress: ""
      insecure: false
      plaintext: false
    registries: []
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  resources:
    requests:
      cpu: 5m
      memory: 32Mi
    limits:
      memory: 64Mi

config-overlays:
  configOverlays:
    controller-cpu:
      #labels:
      #  platform.plural.sh/component: argo-cd
      #  platform.plural.sh/kind: deployment
      #  platform.plural.sh/resource: cpu
      spec:
        name: Controller CPU Requests
        documentation: CPU requests for controller deployment
        updates:
          - path: ['argo-cd', 'argo-cd', 'controller', 'resources', 'requests', 'cpu']
    controller-memory:
      spec:
        name: Controller Memory Requests
        documentation: Memory requests for controller deployment
        updates:
          - path: [ 'argo-cd', 'argo-cd', 'controller', 'resources', 'requests', 'memory' ]
    server-cpu:
      spec:
        name: Server CPU Requests
        documentation: CPU requests for server deployment
        updates:
          - path: ['argo-cd', 'argo-cd', 'server', 'resources', 'requests', 'cpu']
    server-memory:
      spec:
        name: Server Memory Requests
        documentation: Memory requests for server deployment
        updates:
          - path: [ 'argo-cd', 'argo-cd', 'server', 'resources', 'requests', 'memory' ]
    repo-server-cpu:
      spec:
        name: Repo Server CPU Requests
        documentation: CPU requests for repo server deployment
        updates:
          - path: [ 'argo-cd', 'argo-cd', 'repoServer', 'resources', 'requests', 'cpu' ]
    repo-server-memory:
      spec:
        name: Repo Server Memory Requests
        documentation: Memory requests for repo server deployment
        updates:
          - path: [ 'argo-cd', 'argo-cd', 'repoServer', 'resources', 'requests', 'memory' ]
